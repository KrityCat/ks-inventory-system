<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.ProductTypeMapper">

    <resultMap type="ProductType" id="ProductTypeResult">
        <id property="productTypeId" column="product_type_id"/>
        <result property="parentId" column="parent_id"/>
        <result property="ancestors" column="ancestors"/>
        <result property="productTypeName" column="product_type_name"/>
        <result property="orderNum" column="order_num"/>
        <result property="status" column="status"/>
        <result property="delFlag" column="del_flag"/>
        <result property="parentName" column="parent_name"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time"/>
        <result property="updateBy" column="update_by"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <sql id="selectProductTypeVo">
        select pt.product_type_id, pt.parent_id, pt.ancestors, pt.product_type_name, pt.order_num, pt.status,
        pt.del_flag, pt.create_by, pt.create_time, pt.update_by, pt.update_time
        from product_type pt
    </sql>

    <select id="selectProductTypeList" parameterType="ProductType" resultMap="ProductTypeResult">
        <include refid="selectProductTypeVo"/>
        where pt.del_flag = '0'
        <if test="productTypeId != null and productTypeId != 0">
            AND product_type_id = #{productTypeId}
        </if>
        <if test="parentId != null and parentId != 0">
            AND parent_id = #{parentId}
        </if>
        <if test="productTypeName != null and productTypeName != ''">
            AND product_type_name like concat('%', #{productTypeName}, '%')
        </if>
        <if test="status != null and status != ''">
            AND status = #{status}
        </if>
        <!-- 数据范围过滤 -->
        ${params.dataScope}
        order by pt.parent_id, pt.order_num
    </select>

    <select id="selectDeptListByRoleId" resultType="Long">
        select d.dept_id
        from sys_dept d
        left join sys_role_dept rd on d.dept_id = rd.dept_id
        where rd.role_id = #{roleId}
        <if test="deptCheckStrictly">
            and d.dept_id not in (select d.parent_id from sys_dept d inner join sys_role_dept rd on d.dept_id =
            rd.dept_id and rd.role_id = #{roleId})
        </if>
        order by d.parent_id, d.order_num
    </select>

    <select id="selectTypeById" parameterType="Long" resultMap="ProductTypeResult">
        select pt.product_type_id, pt.parent_id, pt.ancestors, pt.product_type_name, pt.order_num, pt.status,
        (select product_type_name from product_type where product_type_id = pt.parent_id) parent_name
        from product_type pt
        where pt.product_type_id = #{productTypeId}
    </select>

    <select id="checkDeptExistUser" parameterType="Long" resultType="int">
        select count(1) from sys_user where dept_id = #{deptId} and del_flag = '0'
    </select>

    <select id="hasChildByProductId" parameterType="Long" resultType="int">
        select count(1) from product_type
        where del_flag = '0' and parent_id = #{productTypeId} limit 1
    </select>

    <select id="selectChildrenTypeById" parameterType="Long" resultMap="ProductTypeResult">
        select * from product_type where find_in_set(#{productTypeId}, ancestors)
    </select>

    <select id="selectNormalChildrenTypeById" parameterType="Long" resultType="int">
        select count(*) from product_type where status = 0 and del_flag = '0' and find_in_set(#{productTypeId},
        ancestors)
    </select>

    <select id="checkTypeNameUnique" resultMap="ProductTypeResult">
        <include refid="selectProductTypeVo"/>
        where product_type_name = #{productTypeName} and parent_id = #{parentId} and del_flag = '0' limit 1
    </select>

    <insert id="insertType" parameterType="ProductType">
        insert into product_type(
        <if test="productTypeId != null and productTypeId != 0">product_type_id,</if>
        <if test="parentId != null and parentId != 0">parent_id,</if>
        <if test="productTypeName != null and productTypeName != ''">product_type_name,</if>
        <if test="ancestors != null and ancestors != ''">ancestors,</if>
        <if test="orderNum != null">order_num,</if>
        <if test="status != null">status,</if>
        <if test="createBy != null and createBy != ''">create_by,</if>
        create_time
        )values(
        <if test="productTypeId != null and productTypeId != 0">#{productTypeId},</if>
        <if test="parentId != null and parentId != 0">#{parentId},</if>
        <if test="productTypeName != null and productTypeName != ''">#{productTypeName},</if>
        <if test="ancestors != null and ancestors != ''">#{ancestors},</if>
        <if test="orderNum != null">#{orderNum},</if>
        <if test="status != null">#{status},</if>
        <if test="createBy != null and createBy != ''">#{createBy},</if>
        sysdate()
        )
    </insert>

    <update id="updateType" parameterType="ProductType">
        update product_type
        <set>
            <if test="parentId != null and parentId != 0">parent_id = #{parentId},</if>
            <if test="productTypeName != null and productTypeName != ''">product_type_name = #{productTypeName},</if>
            <if test="ancestors != null and ancestors != ''">ancestors = #{ancestors},</if>
            <if test="orderNum != null">order_num = #{orderNum},</if>
            <if test="status != null and status != ''">status = #{status},</if>
            <if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
            update_time = sysdate()
        </set>
        where product_type_id = #{productTypeId}
    </update>

    <update id="updateTypeChildren" parameterType="java.util.List">
        update product_type set ancestors =
        <foreach collection="types" item="item" index="index"
                 separator=" " open="case product_type_id" close="end">
            when #{item.productTypeId} then #{item.ancestors}
        </foreach>
        where product_type_id in
        <foreach collection="types" item="item" index="index"
                 separator="," open="(" close=")">
            #{item.productTypeId}
        </foreach>
    </update>

    <update id="updateTypeStatusNormal" parameterType="Long">
        update product_type set status = '0' where product_type_id in
        <foreach collection="array" item="productTypeId" open="(" separator="," close=")">
            #{productTypeId}
        </foreach>
    </update>

    <delete id="deleteTypeById" parameterType="Long">
        update product_type set del_flag = '2' where product_type_id = #{productTypeId}
    </delete>

</mapper> 